// Generated by CoffeeScript 1.3.3
var fs, ini, ion, merge, path, yaml,
  __slice = [].slice;

fs = require('fs');

path = require('path');

yaml = require('yamljs');

ini = require('ini');

ion = require('ion/lib/ion-min');

merge = function(o1, o2) {
  var k;
  for (k in o2) {
    if (typeof o2[k] === 'object' && !(o2[k] instanceof Array) && !(o2[k] instanceof Buffer)) {
      if (typeof o1[k] !== 'object' || o1[k] instanceof Array || o1[k] instanceof Buffer) {
        o1[k] = o2[k];
      } else {
        merge(o1[k], o2[k]);
      }
    } else {
      o1[k] = o2[k];
    }
  }
  return o1;
};

module.exports = function() {
  var arg, args, c, freeze, _i, _j, _len, _ref;
  args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
  c = {};
  freeze = false;
  if (typeof args[args.length - 1] === 'boolean') {
    _ref = args, args = 2 <= _ref.length ? __slice.call(_ref, 0, _i = _ref.length - 1) : (_i = 0, []), freeze = _ref[_i++];
  }
  for (_j = 0, _len = args.length; _j < _len; _j++) {
    arg = args[_j];
    if (typeof arg === 'string') {
      merge(c, (function() {
        switch (path.extname(arg)) {
          case '.ini':
            return ini.parse(fs.readFileSync(arg).toString());
          case '.json':
            return JSON.parse(fs.readFileSync(arg));
          case '.yml':
          case '.yaml':
            return yaml.parse(fs.readFileSync(arg).toString().trim());
          case '.ion':
            return ion.parse(fs.readFileSync(arg).toString().trim().replace(/\n/igm, '\r\n'));
        }
      })());
    } else if (arg !== void 0) {
      merge(c, arg);
    }
  }
  if (freeze) {
    Object.freeze(c);
  }
  return c;
};
